README and TODO and BUGS and LICENSE

This program takes a Minecraft level, finds its topological structure (in terms of caves and tunnels), and produces Graphviz files / png images for each tunnel system it can find.
It destroys the map by placing thinning results inside.
After program is done with thinning, it will wait for graph module modifications. Pressing enter will cause the program to recalculate graph and resave map.

Before proceeding, check out class debug in common.py

How it works:
1. Take all air blocks next to walls.
2. Dilate them and save dilation number (distance from wall) until all points are dilated
3. Have a separate list of points (initially empty) and at each step: add all freshly-dilated points to it, try to remove each point from it as long as there are no disconnections or other changes in structure (within the list).
4. The resulting list is a skeleton of the level. It may contain disjoint subgraphs.
5. Find an unprocessed group of points connected to 3 other points. This is a "clump" in a subgraph of the total graph.
6. Traverse the subgraph, marking clumps and connecting them with tunnels.
7. Go to 5, unless there is no more unmarked clumps.
--- "rc" files are printed now
8. For each graph, combine clumps close together removing 1 tunnel between them and merging other properties.
9. Filter out graphs with few nodes.
10. Print out images/.dot files.

README:

1. Requirements:
* python2 2.5+
* pydot
* Python Imaging Library
* graphviz
* about 1MB RAM per map chunk
* about 5h for 500 chunk map on a 1.2 GHz Intel Core

2. Glossary:
        point - wrapper around the point object of the map. Points on the map are not going to be accessed by any other means. Contains references to clumps
        ending - point that has only 1 neighbor and wasn't removed by thinning
        junction - point that has more than 2 neighbors and couldn't be removed by thinning
        
        tunnel - a structure marking a 1-width section of the map
        clump - combines multiple neighboring junctions. May grow into a cave or ending or sth similar.
        cave, dead end, world - different classifications of clumps
        world - in 3D a clump that contains a 3D space inside it
        
        node - clump after processing or after graphing
        
TODO:
    graph:
        node and edge conversion to printing form should be moved into Node, Tunnel and subclasses
            Node.get_graph_representation()
            find a way to present it nicely
        
        clump resolution:
            BARE MINIMUM:
                mark_clump should mark all nodes in the clump (3+ neighbors). Otherwise floating points will make the program SLOW
                
            world, flat cave:
                1. dilate X times (for 3D and stupid distance it's 2) to get cave all covered. dilate over anything, including space and tunnels
                2. flood fill every resulting surface to count surfaces
                3. if 1 surface, it's not a world. Otherwise, continue
                4. keep dilating until all but one surfaces can't be dilated any more (or other heuristic to find which one is outside. moving straight up?)
                5. AND dilated surfaces and world and save in separate graphers
                6. remove points from graphers
                7. graph each world and save it inside world. will be accessible by Node.get_graph_representation()
        printing nodes should take inteeresting properties from points and present them graphically
    
    display:
        node properties
    thinning:
        points should carry information about interesting neighbors towards the innermost skeleton
